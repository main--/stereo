mono_object_new / mono_object_new_specific
mono_array_new_full (dimensions)
mono_array_new_specific



mono_ldstr
string interning (???)
mono_object_hash
mono_object_to_string
mono_object_clone

(un)boxing

obj_get_domain

monitor locking

exceptions

object ctor / class ctor

mono_object_get_virtual_method
mono_get_delegate_invoke
mono_runtime_delegate_invoke
mono_runtime_invoke_array
mono_method_get_umanaged_thunk

proper mono_runtime_invoke
running Main (plethora of ways)
remoting ???????
field get/set instance/static
property get/set
reference queues



appdomains, ids, names
appdomain get/set, foreach, loading assemblies
getting/setting appdomains: just always set the appropriate domain, it's cheap when we already are on that domain

mono_get_corlib
mono_get_*_class

assemblies, esp. bundled ones (update: bundled assemblies are just a fancy way of loading images from data, supporting this API is not really necessary)
vtable API

mono_class_from_typeref
mono_class_from_generic_parameter
mono_class_inflate_generic_type
mono_class_inflate_generic_method
mono_get_inflated_method (?)
mono_field_from_token
mono_bounded_array_class_get (?)
mono_array_class_get
mono_ptr_class_get
class field,event,property (name+tokens)
mono_class_instance_size
mono_class_array_element_size
mono_class_value_size
mono_class_is_subclass_of
mono_class_is_assignable_from
ldtoken ??
OMG SO MANY CLASS THINGS

monotype api

exceptions ...

image:
from data
read properties

method api

icalls

GC api?


threads api
-----------

* a thread is either attached to the mono RT or not
* there is a cached System.Threading.Thread object per appdomain, but this has no semantic impact
* either use mono's thread creation functions
* or if you're on another thread, Mono is neither Send nor Sync
* you need the ForeignHandle thing to call attach() to get your own MonoHandle
* which detaches the thread on drop

assembly loading
----------------

* we gloss over this completely, the image/assembly distinction is /very/ vague and doesn't seem to matter in practice (except it adds a ref to the Image somehow for some reason???)
* what really matters is making sure an assembly is loaded into an appdomain before you try to runtime-operate on it
* for this we have to basically duplicate the metadata APIs into those that still need to ensure this and those that already have (e.g. Method vs RuntimeMethod)



token api (get token types and stuff)


